from jupiterutils.Utility import JPT
import re
from xml.etree import ElementTree

[DENSITY,
YOUNGS_MODULUS,
SHEAR_MODULUS,
POISSONS_RATIO,
TEMPERATURE] = range(5)

def get_mat_prop_data(strXML):
    mat_name = ""
    nas_id = 0
    datas = []
    strXML = strXML.replace("#", '"')
    root_elem = ElementTree.fromstring(strXML)
    if len(root_elem) == 0:
        raise ValueError
    mat_elem = root_elem[0]
    mat_name = mat_elem.attrib["Name"]
    mat_elem.attrib["Id"]
    nas_id = int(mat_elem.attrib["NasId"])
    mat_elem.attrib["DBId"]
    datas = []
    if len(mat_elem) == 0: raise ValueError
    layer_elem = mat_elem[0]
    for prop_elem in layer_elem:
        if prop_elem.tag == "Density":
            try:
                data_elem = prop_elem[0][0]
            except:
                raise ValueError
            RHO = float(data_elem.text)
            RHO = convert_mat_value_to_doc(RHO, JPT.UnitType.Unit_Density)
            data = ["Density", [("DENSITY", RHO)]]
            datas.append(data)
        elif prop_elem.tag == "Elastic":
            try:
                data_elem = prop_elem[0][0]
            except:
                raise ValueError
            E, G, NU = [float(val) if val.strip() != "" else "" for val in data_elem.text.split(",")]
            E = convert_mat_value_to_doc(E, JPT.UnitType.Unit_Modulus)
            G = convert_mat_value_to_doc(G, JPT.UnitType.Unit_Modulus)
            data = []
            if E != "":
                data.append(("YOUNGS_MODULUS", E))
            if G != "":
                data.append(("SHEAR_MODULUS", G))
            if NU != "":
                data.append(("POISSONS_RATIO", NU))
            datas.append(["Elastic", data])
    return mat_name, nas_id, datas

def diff_str_xml(strXML1, strXML2):
    strXML1_mod = re.sub('DBId=#[0-9]+#', "DBId=#0#", strXML1).strip()
    strXML2_mod = re.sub('DBId=#[0-9]+#', "DBId=#0#", strXML2).strip()
    return strXML1_mod == strXML2_mod

def getMatIdFromXML(strMat):
    strMaterialID = 0
    m = re.search('NasId=#[0-9]+#', strMat)
    if m:
        m = re.search('[0-9]+', m.group())
        if m:
            strMaterialID = int(m.group())
    return strMaterialID

def getMatNameFromXML(strMat):
    m = re.search('Material Name=#[^#]*#', strMat)
    if m:
        strName = m.group()
        strName = strName[strName.find('#')+1:strName.rfind('#')]
        return strName
    return ''

def mat_formatting(mat_str, replace_space):
   if replace_space:
       return mat_str.replace('\n', '').replace('    ', '')
   else:
       return mat_str

def convert_mat_value_from_doc(val, unit):
    if val != "":
        val = JPT.ConvertFromDocUnit(val, unit)
    return val
    
def convert_mat_value_to_doc(val, unit):
    if val != "":
        val = JPT.ConvertValueToDocUnit(val, unit)
    return val

class CMaterial:
    tmpl = """<?xml version=#1.0#?>
<JPT-MATERIAL-LIBRARY Version=#3#>
    <Material Name=#{0}# Description=## Id=#0# NasId=#{1}# DBId=#{2}# IsCompositeMaterial=#false# CId=#0#>
        <Layer Thick=# # Angle=# # Id=#0#>
{3}
        </Layer>
    </Material>
</JPT-MATERIAL-LIBRARY>"""
    def __init__(self, name, mat_id, db_id, mat_layers):
        self.replace_str = True
        self.name = name
        self.mat_id = mat_id
        self.db_id = db_id
        self.mat_layers = []
        if type(mat_layers) is list and type(mat_layers[0]) is not list:  # 1 Layer
            self.mat_layers = [mat_layers]
        elif type(mat_layers) is list and type(mat_layers[0]) is list:  # Multi Layer
            raise NotImplementedError()
    def toStr(self, replace_str):
        mat_layer = self.mat_layers[0]
        data_str = '\n'.join(matProp.toStr(replace_str) for matProp in mat_layer)
        return mat_formatting(self.tmpl.format(self.name, self.mat_id, self.db_id, data_str), replace_str)
    def __str__(self):
        return self.toStr(self.replace_str)
    def __repr__(self):
        return self.__str__()

class MatPropBase:
    def __init__(self):
        self.replace_str = True

class Density(MatPropBase):
    tmpl = """        <Density temperatureDependency=#0# dependencies=#0#>
            <Table Row=#1# Col=#1#>
                <Data>{0}</Data>
            </Table>
        </Density>"""
    def __init__(self, params, temperatureDependency=False):
        super(Density, self).__init__()
        self.row_datas = []
        self.temperatureDependency = temperatureDependency
        def get_row_data(row_param):
            RHO = ""
            for name, val in row_param:
                if name == DENSITY:
                    RHO = val
            return [RHO]
        row_data = get_row_data(params)
        self.row_datas.append(row_data)
    def toStr(self, replace_str):
        row_data = self.row_datas[0]
        RHO = convert_mat_value_from_doc(row_data[0], JPT.UnitType.Unit_Density)
        row_str = '{}'.format(RHO)
        return mat_formatting(self.tmpl.format(row_str), replace_str)
    def __str__(self):
        return self.toStr(self.replace_str)
    def __repr__(self):
        return self.__str__()

class Elastic(MatPropBase):
    tmpl = """        <Elastic Type=#0# temperatureDependency=#0# dependencies=#0# Moduli=#LONG_TERM# SubOption=#Fail_Strain# noCompression=#0# noTension=#0#>
            <Table Row=#1# Col=#3#>
                <Data>{0}</Data>
            </Table>
        </Elastic>"""
    tmpl_tempDep = """        <Elastic Type=#0# temperatureDependency=#1# dependencies=#0# Moduli=#LONG_TERM# SubOption=#Fail_Strain# noCompression=#0# noTension=#0#>
            <Table Row=#{0}# Col=#4#>
                <Data>{1}</Data>
            </Table>
        </Elastic>"""
    def __init__(self, params, temperatureDependency=False):
        super(Elastic, self).__init__()
        self.row_datas = []
        self.temperatureDependency = temperatureDependency
        def get_row_data(row_param):
            E, G, NU, T = [""]*4
            for name, val in row_param:
                if name == YOUNGS_MODULUS:
                    E = val
                elif name == SHEAR_MODULUS:
                    G = val
                elif name == POISSONS_RATIO:
                    NU = val
                elif name == TEMPERATURE:
                    T = val
            if temperatureDependency:
                return [E, G, NU, T]
            else:
                return [E, G, NU]
        if type(params) is list and type(params[0]) is tuple:
            row_data = get_row_data(params)
            self.row_datas.append(row_data)
        elif type(params) is list and type(params[0]) is list:
            for row_param in params:
                row_data = get_row_data(row_param)
                self.row_datas.append(row_data)
    def toStr(self, replace_str):
        if self.temperatureDependency:
            row_strs = []
            for row_data in self.row_datas:
                E = convert_mat_value_from_doc(row_data[0], JPT.UnitType.Unit_Modulus)
                G = convert_mat_value_from_doc(row_data[1], JPT.UnitType.Unit_Modulus)
                NU = row_data[2]
                T = convert_mat_value_from_doc(row_data[3], JPT.UnitType.Unit_Temperature)
                row_str = '{}, {}, {}, {}'.format(E, G, NU, T)
                row_strs.append(row_str)
            row_str = ', '.join(row_strs)
            return mat_formatting(self.tmpl_tempDep.format(len(self.row_datas), row_str), replace_str)
        else:
            row_data = self.row_datas[0]
            E = convert_mat_value_from_doc(row_data[0], JPT.UnitType.Unit_Modulus)
            G = convert_mat_value_from_doc(row_data[1], JPT.UnitType.Unit_Modulus)
            NU = row_data[2]
            row_str = '{}, {}, {}'.format(E, G, NU)
            return mat_formatting(self.tmpl.format(row_str), replace_str)
    def __str__(self):
        return self.toStr(self.replace_str)
    def __repr__(self):
        return self.__str__()
        
        
if __name__ == '__main__':
    d1 = Density( [(DENSITY, 8300.0)] )
    p1 = Elastic( [(YOUNGS_MODULUS, 110000.0), (POISSONS_RATIO, 0.34)] )
    p2 = Elastic( [
        [(YOUNGS_MODULUS, 110000.0), (POISSONS_RATIO, 0.34), (TEMPERATURE, 20.0)],
        [(YOUNGS_MODULUS, 220000.0), (POISSONS_RATIO, 0.35), (TEMPERATURE, 100.0)]
        ], temperatureDependency=True)
    mat1 = CMaterial("STEEL", 1, 0, [d1, p1])
    str_len = len(str(mat1))
    print(mat1)
    print(str_len)

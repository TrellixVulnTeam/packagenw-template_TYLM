from jupiterutils.Utility import JPT_RUN_LINE, JPT_RUN_CODE

class JDGCreator:
    def __init__(self, title, resizable, validation):
        JPT_RUN_CODE("from pyjdg import *")
        message = "dlg=JDGCreator(title='{}',resizable={},validation={})".format(title, resizable, validation)
        JPT_RUN_CODE(message)

    # connect a component to an user defined function
    def on_command(self, name, function):
        message = "dlg.on_command('{}', {})".format(name, function)
        JPT_RUN_LINE(message)

    # generate a dialog and display it
    def generate_window(self):
        message = "dlg.generate_window()"
        JPT_RUN_LINE(message)

    # add a 1D element selector to dialog and user can select 1D element only
    def add_1delement_selector(self):
        message = "dlg.add_1delement_selector()"
        JPT_RUN_LINE(message)

    # add a 2D element selector to dialog and user can select 2D element only
    def add_2delement_selector(self):
        message = "dlg.add_2delement_selector()"
        JPT_RUN_LINE(message)

    # add a 3D element selector to dialog and user can select 3D element only
    def add_3delement_selector(self):
        message = "dlg.add_3delement_selector()"
        JPT_RUN_LINE(message)

    # add a bar part selector to dialog and user can select bar part only
    def add_barpart_selector(self):
        message = "dlg.add_barpart_selector()"
        JPT_RUN_LINE(message)

    # add a edge selector to dialog and user can select edge only
    def add_edge_selector(self):
        message = "dlg.add_edge_selector()"
        JPT_RUN_LINE(message)

    # add a element edge selector to dialog and user can select element edge only
    def add_elementedge_selector(self):
        message = "dlg.add_elementedge_selector()"
        JPT_RUN_LINE(message)

    # add a face selector to dialog and user can select face only
    def add_face_selector(self):
        message = "dlg.add_face_selector()"
        JPT_RUN_LINE(message)

    # add a node selector to dialog and user can select node only
    def add_node_selector(self):
        message = "dlg.add_node_selector()"
        JPT_RUN_LINE(message)

    # add a part selector to dialog and user can select part only
    def add_part_selector(self):
        message = "dlg.add_part_selector()"
        JPT_RUN_LINE(message)

    # add a vertex selector to dialog and user can select vertex only
    def add_vertex_selector(self):
        message = "dlg.add_vertex_selector()"
        JPT_RUN_LINE(message)

    def get_selected_entities(self, selector_id):
        message = "dlg.get_selected_entities({})".format(selector_id)
        JPT_RUN_LINE(message)

    def on_selected(self, list):
        message = "dlg.on_selected(dlg, {})".format(list)
        JPT_RUN_LINE(message)

    # judge a checkbox checked or not
    def isbutton_checked(self, component_name):
        message = "dlg.isbutton_checked('{}')".format(component_name)
        JPT_RUN_LINE(message)

    # make a component disabled
    def disable_item(self, component_name):
        message = "dlg.disable_item('{}')".format(component_name)
        JPT_RUN_LINE(message)

    # make a component enabled
    def enable_item(self, component_name):
        message = "dlg.enable_item('{}')".format(component_name)
        JPT_RUN_LINE(message)

    # set component window text
    def set_item_text(self, component_name, text):
        message = "dlg.set_item_text('{}', '{}')".format(component_name, text)
        JPT_RUN_LINE(message)

    # get a component window text
    def get_item_text(self, component_name):
        message = "dlg.get_item_text('{}')".format(component_name)
        JPT_RUN_LINE(message)

    # add a imagectrl component to dialog
    def add_imagectrl(self, layout, name, image_file):
        message = "dlg.add_imagectrl('{}', '{}', '{}')".format(layout, name, image_file)
        JPT_RUN_LINE(message)

    # give an image file to imagectrl and dispaly it 
    def set_image_file(self, name, link):
        message = "dlg.set_image_file('{}', '{}')".format(name, link)
        JPT_RUN_LINE(message)

    # add a button component to dialog
    def add_button(self, name = "name", text = "", width = 0, height = 0, layout = "layout"):
        message = "dlg.add_button(name = '{}', text = '{}', width = {}, height = {}, layout = '{}')".format(name, text, width, height, layout)
        JPT_RUN_LINE(message)

    # add a checkbox component to dialog
    def add_checkbox(self, name = "Checkbox", text = "Checkbox", width = 0, height = 0, checked = True, layout = "Window"):
        message = "dlg.add_checkbox(name = '{}', text = '{}', width = {}, height = {}, checked = {}, layout = '{}')".format(name, text, width, height, checked, layout)
        JPT_RUN_LINE(message)

    # set a checkbox checked or not
    def set_checkbox_state(self, name, Bool):
        message = "dlg.set_checkbox_state('{}', {})".format(name, Bool)
        JPT_RUN_LINE(message)

    # add a combobox component to dialog
    def add_combobox(self, name = "name", options = [], width = 0, height = 0, layout = "layout"):
        message = "dlg.add_combobox(name = '{}', options = {}, width = {}, height = {}, layout = '{}')".format(name, options, width, height, layout)
        JPT_RUN_LINE(message)

    # get combobox current selection index
    def get_combobox_sel(self, name):
        message = "dlg.get_combobox_sel('{}')".format(name)
        JPT_RUN_LINE(message)

    # insert an option to specified position
    def insert_combobox_option(self, name, position, text):
        message = "dlg.insert_combobox_option('{}', '{}', '{}')".format(name, position, text)
        JPT_RUN_LINE(message)

    # add a groupbox component to dialog
    def add_groupbox(self, name = "name", text = "", width = 0, height = 0, layout = "layout"):
        message = "dlg.add_groupbox(name = '{}', text = '{}', width = {}, height = {}, layout = '{}')".format(name, text, width, height, layout)
        JPT_RUN_LINE(message)

    # make a groupbox checked at right top corner 
    def set_groupbox_checked(self, name, Bool):
        message = "dlg.set_groupbox_checked('{}', {})".format(name, Bool)
        JPT_RUN_LINE(message)

    # make a groupbox collapsed 
    def set_groupbox_collapsed(self, name, Bool):
        message = "dlg.set_groupbox_collapsed('{}', {})".format(name, Bool)
        JPT_RUN_LINE(message)

    # set a groupbox layout direction , horizontal or vertical
    def set_groupbox_orientation(self, name, orientation):
        message = "dlg.set_groupbox_orientation('{}', '{}')".format(name, orientation)
        JPT_RUN_LINE(message)

    # add a horizontal layout
    def add_hlayout(self, name = "name", margin = [2,3,4,5], layout = "layout"):
        message = "dlg.add_hlayout(name = '{}', margin = {}, layout = '{}')".format(name, margin, layout)
        JPT_RUN_LINE(message)

    # add a vertical layout 
    def add_vlayout(self, name = "name", margin = [2,3,4,5], layout = "layout"):
        message = "dlg.add_vlayout(name = '{}', margin = {}, layout = '{}')".format(name, margin, layout)
        JPT_RUN_LINE(message)

    def show_layout(self, name):
        message = "dlg.show_layout('{}')".format(name)
        JPT_RUN_LINE(message)

    # hide a layout and all components within this layout
    def hide_layout(self, name):
        message = "dlg.hide_layout('{}')".format(name)
        JPT_RUN_LINE(message)

    # add label conponent to dialog
    def add_label(self, name = "name", text = "", width = 0, height = 0, layout = "layout"):
        message = "dlg.add_label(name = '{}', text = '{}', width = {}, height = {}, layout = '{}')".format(name, text, width, height, layout)
        JPT_RUN_LINE(message)

    # add a radiobutton component to dialog
    def add_radiobutton(self, name = "name", text = "", width = 0, height = 0, checked = False, layout = "layout"):
        message = "dlg.add_radiobutton(name = '{}', text = '{}', width = {}, height = {}, checked = {}, layout = '{}')".format(name, text, width, height, checked, layout)
        JPT_RUN_LINE(message)

    # add a file/folder browser component to dialog
    def add_browser(self, name = "name", mode = "file", file_filter = "All Files(*.*)", default = "", multisel = False, layout = "layout"):
        message = "dlg.add_browser(name = '{}', mode = '{}', file_filter = '{}', default = '{}', multisel = {}, layout = '{}')".format(name, mode, file_filter, default, multisel, layout)
        JPT_RUN_LINE(message)

    # add a listbox component to dialog
    def add_listbox(self, name = "name", multisel = True, options = ["option1","option2","option3"], width = 100, height = 100, layout = "layout"):
        message = "dlg.add_listbox(name = '{}', multisel = {}, options = {}, width = {}, height = {}, layout = '{}')".format(name, multisel, options, width, height, layout)
        JPT_RUN_LINE(message)

    # insert an option to specified position
    def insert_listbox_option(self, name, position, text):
        message = "dlg.insert_listbox_option('{}', '{}', '{}')".format(name, position, text)
        JPT_RUN_LINE(message)

    # add a textbox component to dialog
    def add_textbox(self, name = "name", text = "", width = 0, height = 0, type = "string", layout = "Layout"):
        message = "dlg.add_textbox(name = '{}', text = '{}', width = {}, height = {}, type = '{}', layout = '{}')".format(name, text, width, height, type, layout)
        JPT_RUN_LINE(message)

    # add a pagesctrl component to dialog
    def add_pagesctrl(self, name = "PagesCtrl", show_header = False, current_page = 1, layout = "Layout"):
        message = "dlg.add_pagesctrl(name = '{}', show_header = {}, current_page = {}, layout = '{}')".format(name, show_header, current_page, layout)
        JPT_RUN_LINE(message)

    # add a new page window to an existed pagectrl
    def add_pagesctrl_page(self, pagesctrl_name = "PagesCtrl", page_name = "PageItem5", page_header = "PageItem"):
        message = "dlg.add_pagesctrl_page(pagesctrl_name = '{}', page_name = '{}', page_header = '{}')".format(pagesctrl_name, page_name, page_header)
        JPT_RUN_LINE(message)

    # add a richeditbox component to dialog
    def add_richeditbox(self, name = "name", text = "", width = 0, height = 0, layout = "Layout"):
        message = "dlg.add_richeditbox(name = '{}', text = '{}', width = {}, height = {}, layout = '{}')".format(name, text, width, height, layout)
        JPT_RUN_LINE(message)

    # add spin component to dialog
    def add_spin(self, name = "name", layout = "Layout"):
        message = "dlg.add_spin(name = '{}', layout = '{}')".format(name, layout)
        JPT_RUN_LINE(message)

    # add a slider component to dialog
    def add_slider(self, name = "name", width = 120, height = 60, layout = "Layout"):
        message = "dlg.add_slider(name = '{}', width = {}, height = {}, layout = '{}')".format(name, width, height, layout)
        JPT_RUN_LINE(message)

    # set a slider at vertical or horizontal direction
    def set_slider_vertical(self, name, Bool):
        message = "dlg.set_slider_vertical('{}', {})".format(name, Bool)
        JPT_RUN_LINE(message)

    # show or hide ticks
    def set_slider_show_tics(self, name, Bool):
        message = "dlg.set_slider_show_tics('{}', {})".format(name, Bool)
        JPT_RUN_LINE(message)

    # show or hide a slider component border frame
    def set_slider_show_border(self, name, Bool):
        message = "dlg.set_slider_show_border('{}', {})".format(name, Bool)
        JPT_RUN_LINE(message)

    # show or hide ticks at both side of a slider component
    def set_slider_bothtics(self, name, Bool):
        message = "dlg.set_slider_bothtics('{}', {})".format(name, Bool)
        JPT_RUN_LINE(message)

    # add a separator component to dialog
    def add_separator(self, layout = "Layout"):
        message = "dlg.add_separator(layout = '{}')".format(layout)
        JPT_RUN_LINE(message)

    # add a tab component to dialog
    def add_tabwnd(self, name = "name", width = 100, height = 100, layout = "Window"):
        message = "dlg.add_tabwnd(name = '{}', width = {}, height = {}, layout = '{}')".format(name, width, height, layout)
        JPT_RUN_LINE(message)

    # add a tab page to a existed tab component
    def add_tabwnd_page(self, tabwnd_name = "tabctrl_name", page_name = "tabitem_name", page_text = "tab1", page_orientation = "horizontal"):
        message = "dlg.add_tabwnd_page(tabwnd_name = '{}', page_name = '{}', page_text = '{}', page_orientation = '{}')".format(tabwnd_name, page_name, page_text, page_orientation)
        JPT_RUN_LINE(message)

    # add a table component to dialog
    def add_table(self, name = "name", menu_clear = True, menu_cut = True, menu_copy = True, menu_paste = True, menu_insert_row = True, menu_delete_row = True, menu_from_file = True, menu_to_file = True, width = 200, show_grid_line = 0, show_line_number = 0, height = 200, columns = ["Heading1","Heading2","Heading3"], rows = 4, layout = "Layout"):
        message = "dlg.add_table(name = '{}', menu_clear = {}, menu_cut = {}, menu_copy = {}, menu_paste = {}, menu_insert_row = {}, menu_delete_row = {}, menu_from_file = {}, menu_to_file = {}, width = {}, show_grid_line = {}, show_line_number = {}, height = {}, columns = {}, rows = {}, layout = '{}')".format(name, menu_clear, menu_cut, menu_copy, menu_paste, menu_insert_row, menu_delete_row, menu_from_file, menu_to_file, width, show_grid_line, show_line_number, height, columns, rows, layout)
        JPT_RUN_LINE(message)

    # add a placeholder 
    def add_space(self, orientation = "horizontal", layout = "Layout"):
        message = "dlg.add_space(orientation = '{}', layout = '{}')".format(orientation, layout)
        JPT_RUN_LINE(message)

    # get listbox current selection index
    def get_listbox_sel(self, name):
        message = "dlg.get_listbox_sel('{}')".format(name)
        JPT_RUN_LINE(message)

    # get combobox options count number
    def get_len_combobox(self, name):
        message = "dlg.get_len_combobox('{}')".format(name)
        JPT_RUN_LINE(message)

    # get listbox options count number
    def get_len_listbox(self, name):
        message = "dlg.get_len_listbox('{}')".format(name)
        JPT_RUN_LINE(message)

    def set_cell_value(self, table_name, cell_row_id_cell_column_id, value):
        message = "dlg.set_cell_value('{}', '{}', '{}')".format(table_name, cell_row_id_cell_column_id, value)
        JPT_RUN_LINE(message)

    def get_cell_value(self, table_name, cell_row_id_cell_column_id, value):
        message = "dlg.get_cell_value('{}', '{}', '{}')".format(table_name, cell_row_id_cell_column_id, value)
        JPT_RUN_LINE(message)

    def get_total_row(self, table_name):
        message = "dlg.get_total_row('{}')".format(table_name)
        JPT_RUN_LINE(message)

    def get_total_column(self, table_name):
        message = "dlg.get_total_column('{}')".format(table_name)
        JPT_RUN_LINE(message)

    def set_combobox_state(self, name, Bool):
        message = "dlg.set_combobox_state('{}', '{}')".format(name, Bool)
        JPT_RUN_LINE(message)